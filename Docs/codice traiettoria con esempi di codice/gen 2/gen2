#include <iostream>
#include <vector>
#include <cmath>

// Function to calculate the parabolic trajectory
void calculateParabolicTrajectory(const std::vector<std::vector<double>>& points, double y)
{
    int n = points.size(); // Number of data points

    // Variables for the least squares method
    double sumX = 0.0, sumX2 = 0.0, sumX3 = 0.0, sumX4 = 0.0;
    double sumY = 0.0, sumXY = 0.0, sumX2Y = 0.0;

    // Calculate the sums required for least squares
    for (int i = 0; i < n; ++i)
    {
        double x = points[i][0];
        double yVal = points[i][1];
        sumX += x;
        sumX2 += x * x;
        sumX3 += x * x * x;
        sumX4 += x * x * x * x;
        sumY += yVal;
        sumXY += x * yVal;
        sumX2Y += x * x * yVal;
    }

    // Calculate the coefficients of the parabolic equation (y = a * x^2 + b * x + c)
    double c = (sumX2 * sumX2Y - sumX3 * sumXY) / (sumX2 * sumX4 - sumX3 * sumX3);
    double b = (sumX2Y - sumX4 * c) / sumX3;
    double a = (sumXY - sumX3 * b - sumX2 * c) / sumX;

    // Calculate the x-coordinate for the given y-coordinate
    double discriminant = b * b - 4 * a * (c - y);
    if (discriminant < 0)
    {
        std::cout << "No real solution exists for the given y-coordinate." << std::endl;
    }
    else
    {
        double x1 = (-b + std::sqrt(discriminant)) / (2 * a);
        double x2 = (-b - std::sqrt(discriminant)) / (2 * a);

        // Display the x-coordinate on the parabolic trajectory
        std::cout << "For y = " << y << ", x can be " << x1 << " or " << x2 << std::endl;
    }
    
    // Display the equation of the parabolic trajectory
    std::cout << "Parabolic Trajectory Equation: y = " << a << " * x^2 + " << b << " * x + " << c << std::endl;
}

int main()
{
    // Example usage: Matrix representing data points (x, y)
    std::vector<std::vector<double>> points = {{0.31,2.79},{5.61,7.95},{7.13,15.24},{11.32,18.06}};

    // Input the y-coordinate
    double yCoordinate;
    std::cout << "Enter the y-coordinate: ";
    std::cin >> yCoordinate;

    // Calculate the parabolic trajectory
    calculateParabolicTrajectory(points, yCoordinate);

    return 0;
}